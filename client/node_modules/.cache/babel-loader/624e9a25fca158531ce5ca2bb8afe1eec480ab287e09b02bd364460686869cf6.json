{"ast":null,"code":"\"use client\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\34615\\\\Desktop\\\\TFC_sys\\\\ProyectoFinal_sys\\\\client\\\\src\\\\context\\\\AuthContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useState, useEffect, useCallback, useContext } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [notifications, setNotifications] = useState([]);\n  const [unreadCount, setUnreadCount] = useState(0);\n  const [notificationsLoading, setNotificationsLoading] = useState(false);\n  const [posts, setPosts] = useState([]);\n  const fetchNotifications = useCallback(async (limit = 5) => {\n    if (!user && !localStorage.getItem(\"token\")) return;\n    try {\n      setNotificationsLoading(true);\n      const res = await axios.get(`http://localhost:5000/api/notifications?limit=${limit}`);\n      setNotifications(res.data.notifications);\n      setUnreadCount(res.data.unreadCount);\n      return res.data;\n    } catch (error) {\n      console.error(\"Error al cargar notificaciones:\", error);\n    } finally {\n      setNotificationsLoading(false);\n    }\n  }, [user]);\n  useEffect(() => {\n    const checkLoggedIn = async () => {\n      try {\n        const token = localStorage.getItem(\"token\");\n        if (token) {\n          axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n          const res = await axios.get(\"http://localhost:5000/api/auth/me\");\n          setUser({\n            id: res.data.id,\n            username: res.data.username,\n            email: res.data.email,\n            role: res.data.role\n          });\n        }\n      } catch (error) {\n        localStorage.removeItem(\"token\");\n        delete axios.defaults.headers.common[\"Authorization\"];\n      }\n      setLoading(false);\n    };\n    checkLoggedIn();\n  }, []);\n  useEffect(() => {\n    if (user) {\n      fetchNotifications();\n    }\n  }, [user, fetchNotifications]);\n  useEffect(() => {\n    if (!user) return;\n    const interval = setInterval(() => {\n      fetchNotifications();\n    }, 30000);\n    return () => clearInterval(interval);\n  }, [user, fetchNotifications]);\n  const login = async (email, password) => {\n    try {\n      const res = await axios.post(\"http://localhost:5000/api/auth/login\", {\n        email,\n        password\n      });\n      localStorage.setItem(\"token\", res.data.token);\n      axios.defaults.headers.common[\"Authorization\"] = `Bearer ${res.data.token}`;\n      setUser({\n        id: res.data.user.id,\n        username: res.data.user.username,\n        email: res.data.user.email,\n        role: res.data.user.role\n      });\n      return true;\n    } catch (error) {\n      return false;\n    }\n  };\n  const register = async (username, email, password) => {\n    try {\n      const res = await axios.post(\"http://localhost:5000/api/auth/register\", {\n        username,\n        email,\n        password\n      });\n      localStorage.setItem(\"token\", res.data.token);\n      axios.defaults.headers.common[\"Authorization\"] = `Bearer ${res.data.token}`;\n      setUser({\n        id: res.data.user.id,\n        username: res.data.user.username,\n        email: res.data.user.email,\n        role: res.data.user.role\n      });\n      return true;\n    } catch (error) {\n      return false;\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem(\"token\");\n    delete axios.defaults.headers.common[\"Authorization\"];\n    setUser(null);\n    setNotifications([]);\n    setUnreadCount(0);\n    setPosts([]);\n  };\n  const updateUser = updatedData => {\n    setUser(prevUser => ({\n      ...prevUser,\n      ...updatedData\n    }));\n  };\n  const refreshUser = async () => {\n    try {\n      const token = localStorage.getItem(\"token\");\n      if (token) {\n        const res = await axios.get(\"http://localhost:5000/api/auth/me\");\n        setUser({\n          id: res.data.id,\n          username: res.data.username,\n          email: res.data.email,\n          role: res.data.role\n        });\n        return res.data;\n      }\n    } catch (error) {\n      console.error(\"Error refreshing user:\", error);\n    }\n  };\n  const markNotificationAsRead = async id => {\n    try {\n      await axios.put(`http://localhost:5000/api/notifications/${id}/read`);\n      setNotifications(prev => prev.map(notif => notif.id === id ? {\n        ...notif,\n        isRead: true\n      } : notif));\n      setUnreadCount(prev => prev > 0 ? prev - 1 : 0);\n    } catch (error) {\n      console.error(\"Error al marcar notificaciÃ³n:\", error);\n    }\n  };\n  const markAllNotificationsAsRead = async () => {\n    try {\n      await axios.put(\"http://localhost:5000/api/notifications/read-all\");\n      setNotifications(prev => prev.map(notif => ({\n        ...notif,\n        isRead: true\n      })));\n      setUnreadCount(0);\n    } catch (error) {\n      console.error(\"Error al marcar todas las notificaciones:\", error);\n    }\n  };\n  const updatePost = (postId, updatedData) => {\n    setPosts(prevPosts => prevPosts.map(post => post.id === postId ? {\n      ...post,\n      ...updatedData\n    } : post));\n  };\n  const deletePost = postId => {\n    setPosts(prevPosts => prevPosts.filter(post => post.id !== postId));\n  };\n  const addPost = newPost => {\n    setPosts(prevPosts => [newPost, ...prevPosts]);\n  };\n  const setAllPosts = newPosts => {\n    setPosts(newPosts);\n  };\n  const updatePostLikes = (postId, liked, likesCount) => {\n    setPosts(prevPosts => prevPosts.map(post => post.id === postId ? {\n      ...post,\n      liked,\n      likes: likesCount\n    } : post));\n  };\n  const updatePostComments = (postId, commentCount) => {\n    setPosts(prevPosts => prevPosts.map(post => post.id === postId ? {\n      ...post,\n      commentCount\n    } : post));\n  };\n  const isAdmin = () => {\n    return (user === null || user === void 0 ? void 0 : user.role) === \"admin\";\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      loading,\n      login,\n      register,\n      logout,\n      updateUser,\n      refreshUser,\n      notifications,\n      unreadCount,\n      notificationsLoading,\n      fetchNotifications,\n      markNotificationAsRead,\n      markAllNotificationsAsRead,\n      posts,\n      updatePost,\n      deletePost,\n      addPost,\n      setAllPosts,\n      updatePostLikes,\n      updatePostComments,\n      isAdmin\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 200,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"tJjE9atK/RKAAespYV2VDk/r2RQ=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["_jsxFileName","_s","$RefreshSig$","_s2","createContext","useState","useEffect","useCallback","useContext","axios","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","user","setUser","loading","setLoading","notifications","setNotifications","unreadCount","setUnreadCount","notificationsLoading","setNotificationsLoading","posts","setPosts","fetchNotifications","limit","localStorage","getItem","res","get","data","error","console","checkLoggedIn","token","defaults","headers","common","id","username","email","role","removeItem","interval","setInterval","clearInterval","login","password","post","setItem","register","logout","updateUser","updatedData","prevUser","refreshUser","markNotificationAsRead","put","prev","map","notif","isRead","markAllNotificationsAsRead","updatePost","postId","prevPosts","deletePost","filter","addPost","newPost","setAllPosts","newPosts","updatePostLikes","liked","likesCount","likes","updatePostComments","commentCount","isAdmin","Provider","value","fileName","lineNumber","columnNumber","_c","useAuth","$RefreshReg$"],"sources":["C:/Users/34615/Desktop/TFC_sys/ProyectoFinal_sys/client/src/context/AuthContext.jsx"],"sourcesContent":["\"use client\"\n\nimport { createContext, useState, useEffect, useCallback, useContext } from \"react\"\nimport axios from \"axios\"\n\nexport const AuthContext = createContext()\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null)\n  const [loading, setLoading] = useState(true)\n\n  const [notifications, setNotifications] = useState([])\n  const [unreadCount, setUnreadCount] = useState(0)\n  const [notificationsLoading, setNotificationsLoading] = useState(false)\n\n  const [posts, setPosts] = useState([])\n\n  const fetchNotifications = useCallback(\n    async (limit = 5) => {\n      if (!user && !localStorage.getItem(\"token\")) return\n\n      try {\n        setNotificationsLoading(true)\n        const res = await axios.get(`http://localhost:5000/api/notifications?limit=${limit}`)\n        setNotifications(res.data.notifications)\n        setUnreadCount(res.data.unreadCount)\n        return res.data\n      } catch (error) {\n        console.error(\"Error al cargar notificaciones:\", error)\n      } finally {\n        setNotificationsLoading(false)\n      }\n    },\n    [user],\n  )\n\n  useEffect(() => {\n    const checkLoggedIn = async () => {\n      try {\n        const token = localStorage.getItem(\"token\")\n        if (token) {\n          axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`\n          const res = await axios.get(\"http://localhost:5000/api/auth/me\")\n          setUser({\n            id: res.data.id,\n            username: res.data.username,\n            email: res.data.email,\n            role: res.data.role,\n          })\n        }\n      } catch (error) {\n        localStorage.removeItem(\"token\")\n        delete axios.defaults.headers.common[\"Authorization\"]\n      }\n      setLoading(false)\n    }\n\n    checkLoggedIn()\n  }, [])\n\n  useEffect(() => {\n    if (user) {\n      fetchNotifications()\n    }\n  }, [user, fetchNotifications])\n\n  useEffect(() => {\n    if (!user) return\n\n    const interval = setInterval(() => {\n      fetchNotifications()\n    }, 30000)\n\n    return () => clearInterval(interval)\n  }, [user, fetchNotifications])\n\n  const login = async (email, password) => {\n    try {\n      const res = await axios.post(\"http://localhost:5000/api/auth/login\", { email, password })\n      localStorage.setItem(\"token\", res.data.token)\n      axios.defaults.headers.common[\"Authorization\"] = `Bearer ${res.data.token}`\n      setUser({\n        id: res.data.user.id,\n        username: res.data.user.username,\n        email: res.data.user.email,\n        role: res.data.user.role,\n      })\n      return true\n    } catch (error) {\n      return false\n    }\n  }\n\n  const register = async (username, email, password) => {\n    try {\n      const res = await axios.post(\"http://localhost:5000/api/auth/register\", {\n        username,\n        email,\n        password,\n      })\n      localStorage.setItem(\"token\", res.data.token)\n      axios.defaults.headers.common[\"Authorization\"] = `Bearer ${res.data.token}`\n      setUser({\n        id: res.data.user.id,\n        username: res.data.user.username,\n        email: res.data.user.email,\n        role: res.data.user.role,\n      })\n      return true\n    } catch (error) {\n      return false\n    }\n  }\n\n  const logout = () => {\n    localStorage.removeItem(\"token\")\n    delete axios.defaults.headers.common[\"Authorization\"]\n    setUser(null)\n    setNotifications([])\n    setUnreadCount(0)\n    setPosts([])\n  }\n\n  const updateUser = (updatedData) => {\n    setUser((prevUser) => ({\n      ...prevUser,\n      ...updatedData,\n    }))\n  }\n\n  const refreshUser = async () => {\n    try {\n      const token = localStorage.getItem(\"token\")\n      if (token) {\n        const res = await axios.get(\"http://localhost:5000/api/auth/me\")\n        setUser({\n          id: res.data.id,\n          username: res.data.username,\n          email: res.data.email,\n          role: res.data.role,\n        })\n        return res.data\n      }\n    } catch (error) {\n      console.error(\"Error refreshing user:\", error)\n    }\n  }\n\n  const markNotificationAsRead = async (id) => {\n    try {\n      await axios.put(`http://localhost:5000/api/notifications/${id}/read`)\n      setNotifications((prev) => prev.map((notif) => (notif.id === id ? { ...notif, isRead: true } : notif)))\n      setUnreadCount((prev) => (prev > 0 ? prev - 1 : 0))\n    } catch (error) {\n      console.error(\"Error al marcar notificaciÃ³n:\", error)\n    }\n  }\n\n  const markAllNotificationsAsRead = async () => {\n    try {\n      await axios.put(\"http://localhost:5000/api/notifications/read-all\")\n      setNotifications((prev) => prev.map((notif) => ({ ...notif, isRead: true })))\n      setUnreadCount(0)\n    } catch (error) {\n      console.error(\"Error al marcar todas las notificaciones:\", error)\n    }\n  }\n\n  const updatePost = (postId, updatedData) => {\n    setPosts((prevPosts) => prevPosts.map((post) => (post.id === postId ? { ...post, ...updatedData } : post)))\n  }\n\n  const deletePost = (postId) => {\n    setPosts((prevPosts) => prevPosts.filter((post) => post.id !== postId))\n  }\n\n  const addPost = (newPost) => {\n    setPosts((prevPosts) => [newPost, ...prevPosts])\n  }\n\n  const setAllPosts = (newPosts) => {\n    setPosts(newPosts)\n  }\n\n  const updatePostLikes = (postId, liked, likesCount) => {\n    setPosts((prevPosts) =>\n      prevPosts.map((post) => (post.id === postId ? { ...post, liked, likes: likesCount } : post)),\n    )\n  }\n\n  const updatePostComments = (postId, commentCount) => {\n    setPosts((prevPosts) => prevPosts.map((post) => (post.id === postId ? { ...post, commentCount } : post)))\n  }\n\n  const isAdmin = () => {\n  return user?.role === \"admin\"\n}\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user,\n        loading,\n        login,\n        register,\n        logout,\n        updateUser,\n        refreshUser,\n        notifications,\n        unreadCount,\n        notificationsLoading,\n        fetchNotifications,\n        markNotificationAsRead,\n        markAllNotificationsAsRead,\n        posts,\n        updatePost,\n        deletePost,\n        addPost,\n        setAllPosts,\n        updatePostLikes,\n        updatePostComments,\n        isAdmin,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  )\n}\n\nexport const useAuth = () => {\n  return useContext(AuthContext)\n}\n\nexport default AuthContext\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}