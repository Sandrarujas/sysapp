{"ast":null,"code":"\"use client\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\34615\\\\Desktop\\\\ProyectoFinal_sys\\\\client\\\\src\\\\components\\\\NotificationDropdown.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect, useRef } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport axios from \"axios\";\nimport \"../App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NotificationDropdown = () => {\n  _s();\n  const [notifications, setNotifications] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [isOpen, setIsOpen] = useState(false);\n  const [unreadCount, setUnreadCount] = useState(0);\n  const dropdownRef = useRef(null);\n\n  // Cargar notificaciones\n  const fetchNotifications = async () => {\n    try {\n      setLoading(true);\n      const res = await axios.get(\"http://localhost:5000/api/notifications\");\n      setNotifications(res.data);\n      setUnreadCount(res.data.filter(notif => !notif.isRead).length);\n      setLoading(false);\n    } catch (error) {\n      console.error(\"Error al cargar notificaciones:\", error);\n      setLoading(false);\n    }\n  };\n\n  // Cargar notificaciones al montar el componente\n  useEffect(() => {\n    fetchNotifications();\n\n    // Configurar intervalo para actualizar notificaciones\n    const interval = setInterval(fetchNotifications, 30000); // Cada 30 segundos\n    return () => clearInterval(interval);\n  }, []);\n\n  // Cerrar el dropdown al hacer clic fuera\n  useEffect(() => {\n    const handleClickOutside = event => {\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {\n        setIsOpen(false);\n      }\n    };\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => document.removeEventListener(\"mousedown\", handleClickOutside);\n  }, []);\n\n  // Marcar notificación como leída\n  const handleNotificationClick = async notification => {\n    if (!notification.isRead) {\n      try {\n        await axios.put(`http://localhost:5000/api/notifications/${notification.id}/read`);\n\n        // Actualizar estado local\n        setNotifications(notifications.map(n => n.id === notification.id ? {\n          ...n,\n          isRead: true\n        } : n));\n        setUnreadCount(prev => Math.max(0, prev - 1));\n      } catch (error) {\n        console.error(\"Error al marcar notificación como leída:\", error);\n      }\n    }\n  };\n\n  // Marcar todas como leídas\n  const markAllAsRead = async () => {\n    try {\n      await axios.put(\"http://localhost:5000/api/notifications/read-all\");\n\n      // Actualizar estado local\n      setNotifications(notifications.map(n => ({\n        ...n,\n        isRead: true\n      })));\n      setUnreadCount(0);\n    } catch (error) {\n      console.error(\"Error al marcar todas como leídas:\", error);\n    }\n  };\n\n  // Generar enlace y texto según el tipo de notificación\n  const getNotificationDetails = notification => {\n    switch (notification.type) {\n      case 'like':\n        return {\n          link: `/post/${notification.post.id}`,\n          text: `dio me gusta a tu publicación`\n        };\n      case 'comment':\n        return {\n          link: `/post/${notification.post.id}`,\n          text: `comentó en tu publicación`\n        };\n      case 'follow':\n        return {\n          link: `/profile/${notification.sender.username}`,\n          text: `comenzó a seguirte`\n        };\n      case 'message':\n        return {\n          link: `/messages/${notification.sender.id}`,\n          text: `te envió un mensaje`\n        };\n      default:\n        return {\n          link: '/',\n          text: 'interactuó con tu contenido'\n        };\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"notification-container\",\n    ref: dropdownRef,\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"notification-button\",\n      onClick: () => setIsOpen(!isOpen),\n      children: [/*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"notification-icon\",\n        children: \"\\uD83D\\uDD14\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), unreadCount > 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"notification-badge\",\n        children: unreadCount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), isOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"notification-dropdown\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"notification-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Notificaciones\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 13\n        }, this), unreadCount > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"mark-all-read\",\n          onClick: markAllAsRead,\n          children: \"Marcar todas como le\\xEDdas\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"notification-list\",\n        children: loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"notification-loading\",\n          children: \"Cargando...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 15\n        }, this) : notifications.length > 0 ? notifications.map(notification => {\n          const {\n            link,\n            text\n          } = getNotificationDetails(notification);\n          return /*#__PURE__*/_jsxDEV(Link, {\n            to: link,\n            className: `notification-item ${!notification.isRead ? 'unread' : ''}`,\n            onClick: () => handleNotificationClick(notification),\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: notification.sender.profileImage ? `http://localhost:5000${notification.sender.profileImage}` : \"/placeholder.svg?height=40&width=40\",\n              alt: notification.sender.username,\n              className: \"notification-avatar\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 148,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"notification-content\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: notification.sender.username\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 155,\n                  columnNumber: 25\n                }, this), \" \", text]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 154,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"notification-time\",\n                children: new Date(notification.createdAt).toLocaleString()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 157,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 153,\n              columnNumber: 21\n            }, this)]\n          }, notification.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 19\n          }, this);\n        }) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"notification-empty\",\n          children: \"No tienes notificaciones\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 5\n  }, this);\n};\n_s(NotificationDropdown, \"9+/md0+OUKoGOxQyOZZG1ZGvqNo=\");\n_c = NotificationDropdown;\nexport default NotificationDropdown;\nvar _c;\n$RefreshReg$(_c, \"NotificationDropdown\");","map":{"version":3,"names":["_jsxFileName","_s","$RefreshSig$","useState","useEffect","useRef","Link","axios","jsxDEV","_jsxDEV","NotificationDropdown","notifications","setNotifications","loading","setLoading","isOpen","setIsOpen","unreadCount","setUnreadCount","dropdownRef","fetchNotifications","res","get","data","filter","notif","isRead","length","error","console","interval","setInterval","clearInterval","handleClickOutside","event","current","contains","target","document","addEventListener","removeEventListener","handleNotificationClick","notification","put","id","map","n","prev","Math","max","markAllAsRead","getNotificationDetails","type","link","post","text","sender","username","className","ref","children","onClick","fileName","lineNumber","columnNumber","to","src","profileImage","alt","Date","createdAt","toLocaleString","_c","$RefreshReg$"],"sources":["C:/Users/34615/Desktop/ProyectoFinal_sys/client/src/components/NotificationDropdown.jsx"],"sourcesContent":["\"use client\"\r\n\r\nimport { useState, useEffect, useRef } from \"react\"\r\nimport { Link } from \"react-router-dom\"\r\nimport axios from \"axios\"\r\nimport \"../App.css\"\r\n\r\n\r\nconst NotificationDropdown = () => {\r\n  const [notifications, setNotifications] = useState([])\r\n  const [loading, setLoading] = useState(false)\r\n  const [isOpen, setIsOpen] = useState(false)\r\n  const [unreadCount, setUnreadCount] = useState(0)\r\n  const dropdownRef = useRef(null)\r\n\r\n  // Cargar notificaciones\r\n  const fetchNotifications = async () => {\r\n    try {\r\n      setLoading(true)\r\n      const res = await axios.get(\"http://localhost:5000/api/notifications\")\r\n      setNotifications(res.data)\r\n      setUnreadCount(res.data.filter(notif => !notif.isRead).length)\r\n      setLoading(false)\r\n    } catch (error) {\r\n      console.error(\"Error al cargar notificaciones:\", error)\r\n      setLoading(false)\r\n    }\r\n  }\r\n\r\n  // Cargar notificaciones al montar el componente\r\n  useEffect(() => {\r\n    fetchNotifications()\r\n\r\n    // Configurar intervalo para actualizar notificaciones\r\n    const interval = setInterval(fetchNotifications, 30000) // Cada 30 segundos\r\n    return () => clearInterval(interval)\r\n  }, [])\r\n\r\n  // Cerrar el dropdown al hacer clic fuera\r\n  useEffect(() => {\r\n    const handleClickOutside = (event) => {\r\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {\r\n        setIsOpen(false)\r\n      }\r\n    }\r\n\r\n    document.addEventListener(\"mousedown\", handleClickOutside)\r\n    return () => document.removeEventListener(\"mousedown\", handleClickOutside)\r\n  }, [])\r\n\r\n  // Marcar notificación como leída\r\n  const handleNotificationClick = async (notification) => {\r\n    if (!notification.isRead) {\r\n      try {\r\n        await axios.put(`http://localhost:5000/api/notifications/${notification.id}/read`)\r\n        \r\n        // Actualizar estado local\r\n        setNotifications(notifications.map(n => \r\n          n.id === notification.id ? { ...n, isRead: true } : n\r\n        ))\r\n        setUnreadCount(prev => Math.max(0, prev - 1))\r\n      } catch (error) {\r\n        console.error(\"Error al marcar notificación como leída:\", error)\r\n      }\r\n    }\r\n  }\r\n\r\n  // Marcar todas como leídas\r\n  const markAllAsRead = async () => {\r\n    try {\r\n      await axios.put(\"http://localhost:5000/api/notifications/read-all\")\r\n      \r\n      // Actualizar estado local\r\n      setNotifications(notifications.map(n => ({ ...n, isRead: true })))\r\n      setUnreadCount(0)\r\n    } catch (error) {\r\n      console.error(\"Error al marcar todas como leídas:\", error)\r\n    }\r\n  }\r\n\r\n  // Generar enlace y texto según el tipo de notificación\r\n  const getNotificationDetails = (notification) => {\r\n    switch (notification.type) {\r\n      case 'like':\r\n        return {\r\n          link: `/post/${notification.post.id}`,\r\n          text: `dio me gusta a tu publicación`\r\n        }\r\n      case 'comment':\r\n        return {\r\n          link: `/post/${notification.post.id}`,\r\n          text: `comentó en tu publicación`\r\n        }\r\n      case 'follow':\r\n        return {\r\n          link: `/profile/${notification.sender.username}`,\r\n          text: `comenzó a seguirte`\r\n        }\r\n      case 'message':\r\n        return {\r\n          link: `/messages/${notification.sender.id}`,\r\n          text: `te envió un mensaje`\r\n        }\r\n      default:\r\n        return {\r\n          link: '/',\r\n          text: 'interactuó con tu contenido'\r\n        }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"notification-container\" ref={dropdownRef}>\r\n      <button \r\n        className=\"notification-button\" \r\n        onClick={() => setIsOpen(!isOpen)}\r\n      >\r\n        <i className=\"notification-icon\">🔔</i>\r\n        {unreadCount > 0 && (\r\n          <span className=\"notification-badge\">{unreadCount}</span>\r\n        )}\r\n      </button>\r\n\r\n      {isOpen && (\r\n        <div className=\"notification-dropdown\">\r\n          <div className=\"notification-header\">\r\n            <h3>Notificaciones</h3>\r\n            {unreadCount > 0 && (\r\n              <button className=\"mark-all-read\" onClick={markAllAsRead}>\r\n                Marcar todas como leídas\r\n              </button>\r\n            )}\r\n          </div>\r\n\r\n          <div className=\"notification-list\">\r\n            {loading ? (\r\n              <div className=\"notification-loading\">Cargando...</div>\r\n            ) : notifications.length > 0 ? (\r\n              notifications.map(notification => {\r\n                const { link, text } = getNotificationDetails(notification)\r\n                return (\r\n                  <Link \r\n                    key={notification.id}\r\n                    to={link}\r\n                    className={`notification-item ${!notification.isRead ? 'unread' : ''}`}\r\n                    onClick={() => handleNotificationClick(notification)}\r\n                  >\r\n                    <img \r\n                      src={notification.sender.profileImage ? `http://localhost:5000${notification.sender.profileImage}` : \"/placeholder.svg?height=40&width=40\"} \r\n                      alt={notification.sender.username}\r\n                      className=\"notification-avatar\"\r\n                    />\r\n                    <div className=\"notification-content\">\r\n                      <p>\r\n                        <strong>{notification.sender.username}</strong> {text}\r\n                      </p>\r\n                      <span className=\"notification-time\">\r\n                        {new Date(notification.createdAt).toLocaleString()}\r\n                      </span>\r\n                    </div>\r\n                  </Link>\r\n                )\r\n              })\r\n            ) : (\r\n              <div className=\"notification-empty\">No tienes notificaciones</div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default NotificationDropdown"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}