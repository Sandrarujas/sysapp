{"ast":null,"code":"\"use client\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\34615\\\\Desktop\\\\TFC_sys\\\\ProyectoFinal_sys\\\\client\\\\src\\\\context\\\\AuthContext.jsx\",\n  _s = $RefreshSig$();\nimport { createContext, useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  // Estados existentes\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // ✅ NUEVOS ESTADOS para notificaciones\n  const [notifications, setNotifications] = useState([]);\n  const [unreadCount, setUnreadCount] = useState(0);\n  const [notificationsLoading, setNotificationsLoading] = useState(false);\n\n  // ✅ NUEVOS ESTADOS para posts\n  const [posts, setPosts] = useState([]);\n  useEffect(() => {\n    const checkLoggedIn = async () => {\n      try {\n        const token = localStorage.getItem(\"token\");\n        if (token) {\n          axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n          const res = await axios.get(\"http://localhost:5000/api/auth/me\");\n          setUser(res.data);\n\n          // ✅ Cargar notificaciones al iniciar sesión\n          fetchNotifications();\n        }\n      } catch (error) {\n        localStorage.removeItem(\"token\");\n        delete axios.defaults.headers.common[\"Authorization\"];\n      }\n      setLoading(false);\n    };\n    checkLoggedIn();\n  }, []);\n\n  // ✅ POLLING automático para notificaciones cada 30 segundos\n  useEffect(() => {\n    if (!user) return;\n    const interval = setInterval(() => {\n      fetchNotifications();\n    }, 30000); // 30 segundos\n\n    return () => clearInterval(interval);\n  }, [user]);\n  const login = async (email, password) => {\n    try {\n      const res = await axios.post(\"http://localhost:5000/api/auth/login\", {\n        email,\n        password\n      });\n      localStorage.setItem(\"token\", res.data.token);\n      axios.defaults.headers.common[\"Authorization\"] = `Bearer ${res.data.token}`;\n      setUser(res.data.user);\n\n      // ✅ Cargar notificaciones después del login\n      fetchNotifications();\n      return true;\n    } catch (error) {\n      return false;\n    }\n  };\n  const register = async (username, email, password) => {\n    try {\n      const res = await axios.post(\"http://localhost:5000/api/auth/register\", {\n        username,\n        email,\n        password\n      });\n      localStorage.setItem(\"token\", res.data.token);\n      axios.defaults.headers.common[\"Authorization\"] = `Bearer ${res.data.token}`;\n      setUser(res.data.user);\n\n      // ✅ Cargar notificaciones después del registro\n      fetchNotifications();\n      return true;\n    } catch (error) {\n      return false;\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem(\"token\");\n    delete axios.defaults.headers.common[\"Authorization\"];\n    setUser(null);\n\n    // ✅ Limpiar datos al cerrar sesión\n    setNotifications([]);\n    setUnreadCount(0);\n    setPosts([]);\n  };\n\n  // ✅ NUEVAS FUNCIONES para usuario\n  const updateUser = updatedData => {\n    setUser(prevUser => ({\n      ...prevUser,\n      ...updatedData\n    }));\n  };\n  const refreshUser = async () => {\n    try {\n      const token = localStorage.getItem(\"token\");\n      if (token) {\n        const res = await axios.get(\"http://localhost:5000/api/auth/me\");\n        setUser(res.data);\n        return res.data;\n      }\n    } catch (error) {\n      console.error(\"Error refreshing user:\", error);\n    }\n  };\n\n  // ✅ NUEVAS FUNCIONES para notificaciones\n  const fetchNotifications = async (limit = 5) => {\n    if (!user && !localStorage.getItem(\"token\")) return;\n    try {\n      setNotificationsLoading(true);\n      const res = await axios.get(`http://localhost:5000/api/notifications?limit=${limit}`);\n      setNotifications(res.data.notifications);\n      setUnreadCount(res.data.unreadCount);\n      return res.data;\n    } catch (error) {\n      console.error(\"Error al cargar notificaciones:\", error);\n    } finally {\n      setNotificationsLoading(false);\n    }\n  };\n  const markNotificationAsRead = async id => {\n    try {\n      await axios.put(`http://localhost:5000/api/notifications/${id}/read`);\n      setNotifications(prev => prev.map(notif => notif.id === id ? {\n        ...notif,\n        isRead: true\n      } : notif));\n      setUnreadCount(prev => prev > 0 ? prev - 1 : 0);\n    } catch (error) {\n      console.error(\"Error al marcar notificación:\", error);\n    }\n  };\n  const markAllNotificationsAsRead = async () => {\n    try {\n      await axios.put(\"http://localhost:5000/api/notifications/read-all\");\n      setNotifications(prev => prev.map(notif => ({\n        ...notif,\n        isRead: true\n      })));\n      setUnreadCount(0);\n    } catch (error) {\n      console.error(\"Error al marcar todas las notificaciones:\", error);\n    }\n  };\n\n  // ✅ NUEVAS FUNCIONES para posts\n  const updatePost = (postId, updatedData) => {\n    setPosts(prevPosts => prevPosts.map(post => post.id === postId ? {\n      ...post,\n      ...updatedData\n    } : post));\n  };\n  const deletePost = postId => {\n    setPosts(prevPosts => prevPosts.filter(post => post.id !== postId));\n  };\n  const addPost = newPost => {\n    setPosts(prevPosts => [newPost, ...prevPosts]);\n  };\n  const setAllPosts = newPosts => {\n    setPosts(newPosts);\n  };\n  const updatePostLikes = (postId, liked, likesCount) => {\n    setPosts(prevPosts => prevPosts.map(post => post.id === postId ? {\n      ...post,\n      liked,\n      likes: likesCount\n    } : post));\n  };\n  const updatePostComments = (postId, commentCount) => {\n    setPosts(prevPosts => prevPosts.map(post => post.id === postId ? {\n      ...post,\n      commentCount\n    } : post));\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      // Estados existentes\n      user,\n      loading,\n      // Funciones existentes\n      login,\n      register,\n      logout,\n      // ✅ NUEVAS funciones de usuario\n      updateUser,\n      refreshUser,\n      // ✅ NUEVOS estados y funciones de notificaciones\n      notifications,\n      unreadCount,\n      notificationsLoading,\n      fetchNotifications,\n      markNotificationAsRead,\n      markAllNotificationsAsRead,\n      // ✅ NUEVOS estados y funciones de posts\n      posts,\n      updatePost,\n      deletePost,\n      addPost,\n      setAllPosts,\n      updatePostLikes,\n      updatePostComments\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 194,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"pf6+qi2ePR8sh/aiGpr4palloo8=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["_jsxFileName","_s","$RefreshSig$","createContext","useState","useEffect","axios","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","user","setUser","loading","setLoading","notifications","setNotifications","unreadCount","setUnreadCount","notificationsLoading","setNotificationsLoading","posts","setPosts","checkLoggedIn","token","localStorage","getItem","defaults","headers","common","res","get","data","fetchNotifications","error","removeItem","interval","setInterval","clearInterval","login","email","password","post","setItem","register","username","logout","updateUser","updatedData","prevUser","refreshUser","console","limit","markNotificationAsRead","id","put","prev","map","notif","isRead","markAllNotificationsAsRead","updatePost","postId","prevPosts","deletePost","filter","addPost","newPost","setAllPosts","newPosts","updatePostLikes","liked","likesCount","likes","updatePostComments","commentCount","Provider","value","fileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/34615/Desktop/TFC_sys/ProyectoFinal_sys/client/src/context/AuthContext.jsx"],"sourcesContent":["\"use client\"\n\nimport { createContext, useState, useEffect } from \"react\"\nimport axios from \"axios\"\n\nexport const AuthContext = createContext()\n\nexport const AuthProvider = ({ children }) => {\n  // Estados existentes\n  const [user, setUser] = useState(null)\n  const [loading, setLoading] = useState(true)\n\n  // ✅ NUEVOS ESTADOS para notificaciones\n  const [notifications, setNotifications] = useState([])\n  const [unreadCount, setUnreadCount] = useState(0)\n  const [notificationsLoading, setNotificationsLoading] = useState(false)\n\n  // ✅ NUEVOS ESTADOS para posts\n  const [posts, setPosts] = useState([])\n\n  useEffect(() => {\n    const checkLoggedIn = async () => {\n      try {\n        const token = localStorage.getItem(\"token\")\n        if (token) {\n          axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`\n          const res = await axios.get(\"http://localhost:5000/api/auth/me\")\n          setUser(res.data)\n\n          // ✅ Cargar notificaciones al iniciar sesión\n          fetchNotifications()\n        }\n      } catch (error) {\n        localStorage.removeItem(\"token\")\n        delete axios.defaults.headers.common[\"Authorization\"]\n      }\n      setLoading(false)\n    }\n\n    checkLoggedIn()\n  }, [])\n\n  // ✅ POLLING automático para notificaciones cada 30 segundos\n  useEffect(() => {\n    if (!user) return\n\n    const interval = setInterval(() => {\n      fetchNotifications()\n    }, 30000) // 30 segundos\n\n    return () => clearInterval(interval)\n  }, [user])\n\n  const login = async (email, password) => {\n    try {\n      const res = await axios.post(\"http://localhost:5000/api/auth/login\", {\n        email,\n        password,\n      })\n      localStorage.setItem(\"token\", res.data.token)\n      axios.defaults.headers.common[\"Authorization\"] = `Bearer ${res.data.token}`\n      setUser(res.data.user)\n\n      // ✅ Cargar notificaciones después del login\n      fetchNotifications()\n\n      return true\n    } catch (error) {\n      return false\n    }\n  }\n\n  const register = async (username, email, password) => {\n    try {\n      const res = await axios.post(\"http://localhost:5000/api/auth/register\", {\n        username,\n        email,\n        password,\n      })\n      localStorage.setItem(\"token\", res.data.token)\n      axios.defaults.headers.common[\"Authorization\"] = `Bearer ${res.data.token}`\n      setUser(res.data.user)\n\n      // ✅ Cargar notificaciones después del registro\n      fetchNotifications()\n\n      return true\n    } catch (error) {\n      return false\n    }\n  }\n\n  const logout = () => {\n    localStorage.removeItem(\"token\")\n    delete axios.defaults.headers.common[\"Authorization\"]\n    setUser(null)\n\n    // ✅ Limpiar datos al cerrar sesión\n    setNotifications([])\n    setUnreadCount(0)\n    setPosts([])\n  }\n\n  // ✅ NUEVAS FUNCIONES para usuario\n  const updateUser = (updatedData) => {\n    setUser((prevUser) => ({\n      ...prevUser,\n      ...updatedData,\n    }))\n  }\n\n  const refreshUser = async () => {\n    try {\n      const token = localStorage.getItem(\"token\")\n      if (token) {\n        const res = await axios.get(\"http://localhost:5000/api/auth/me\")\n        setUser(res.data)\n        return res.data\n      }\n    } catch (error) {\n      console.error(\"Error refreshing user:\", error)\n    }\n  }\n\n  // ✅ NUEVAS FUNCIONES para notificaciones\n  const fetchNotifications = async (limit = 5) => {\n    if (!user && !localStorage.getItem(\"token\")) return\n\n    try {\n      setNotificationsLoading(true)\n      const res = await axios.get(`http://localhost:5000/api/notifications?limit=${limit}`)\n      setNotifications(res.data.notifications)\n      setUnreadCount(res.data.unreadCount)\n      return res.data\n    } catch (error) {\n      console.error(\"Error al cargar notificaciones:\", error)\n    } finally {\n      setNotificationsLoading(false)\n    }\n  }\n\n  const markNotificationAsRead = async (id) => {\n    try {\n      await axios.put(`http://localhost:5000/api/notifications/${id}/read`)\n\n      setNotifications((prev) => prev.map((notif) => (notif.id === id ? { ...notif, isRead: true } : notif)))\n\n      setUnreadCount((prev) => (prev > 0 ? prev - 1 : 0))\n    } catch (error) {\n      console.error(\"Error al marcar notificación:\", error)\n    }\n  }\n\n  const markAllNotificationsAsRead = async () => {\n    try {\n      await axios.put(\"http://localhost:5000/api/notifications/read-all\")\n\n      setNotifications((prev) => prev.map((notif) => ({ ...notif, isRead: true })))\n\n      setUnreadCount(0)\n    } catch (error) {\n      console.error(\"Error al marcar todas las notificaciones:\", error)\n    }\n  }\n\n  // ✅ NUEVAS FUNCIONES para posts\n  const updatePost = (postId, updatedData) => {\n    setPosts((prevPosts) => prevPosts.map((post) => (post.id === postId ? { ...post, ...updatedData } : post)))\n  }\n\n  const deletePost = (postId) => {\n    setPosts((prevPosts) => prevPosts.filter((post) => post.id !== postId))\n  }\n\n  const addPost = (newPost) => {\n    setPosts((prevPosts) => [newPost, ...prevPosts])\n  }\n\n  const setAllPosts = (newPosts) => {\n    setPosts(newPosts)\n  }\n\n  const updatePostLikes = (postId, liked, likesCount) => {\n    setPosts((prevPosts) =>\n      prevPosts.map((post) => (post.id === postId ? { ...post, liked, likes: likesCount } : post)),\n    )\n  }\n\n  const updatePostComments = (postId, commentCount) => {\n    setPosts((prevPosts) => prevPosts.map((post) => (post.id === postId ? { ...post, commentCount } : post)))\n  }\n\n  return (\n    <AuthContext.Provider\n      value={{\n        // Estados existentes\n        user,\n        loading,\n\n        // Funciones existentes\n        login,\n        register,\n        logout,\n\n        // ✅ NUEVAS funciones de usuario\n        updateUser,\n        refreshUser,\n\n        // ✅ NUEVOS estados y funciones de notificaciones\n        notifications,\n        unreadCount,\n        notificationsLoading,\n        fetchNotifications,\n        markNotificationAsRead,\n        markAllNotificationsAsRead,\n\n        // ✅ NUEVOS estados y funciones de posts\n        posts,\n        updatePost,\n        deletePost,\n        addPost,\n        setAllPosts,\n        updatePostLikes,\n        updatePostComments,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  )\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}